/**
 * @Author: Gábor Bakos (Bakos.Gabor.1@stud.u-szeged.hu)
 * Version: $Id: yacas_out.sor,v 1.2 2004/12/15 13:37:36 baga Exp $
 */

#header <<
#include <string>
#include <iostream>
#include <fstream>
#include <memory>
using namespace std;
#include "tokens.h"
#include "AST.h"
typedef AST SORAST;
>>

class TreeParser_yacas_out {
<<
	ofstream cout;
	string prefix, suffix, header, footer;
	bool last_identifier_was_in_uppercase;
	TreeParser_yacas_out(const char *fn, const char *iprefix, const char *isuffix, const char *iheader, const char *ifooter) : cout(fn), prefix(iprefix), suffix(isuffix), header(iheader), footer(ifooter)
	{
		cout << header;
	}
	~TreeParser_yacas_out()
	{
		cout << footer;
	}
>>

inp: <<string *f;>>
	( #(NL {log_expr>[f] <<cout << prefix << *f << suffix << "\n"; delete f;>>} inp)
	| #(ASSIGN add_expr>[f] <<cout << prefix << *f << ":="; delete f;>> log_expr>[f] <<cout << *f << suffix << "\n"; delete f;>> inp)
	|)
	;

log_expr>[string *f]: <<string *g=NULL;>>
	( log_value>[f]
	| #(AND log_expr>[f] log_expr>[g] <<*f+=" And "+*g; delete g;>>)
	| #(NAND log_expr>[f] log_expr>[g] <<*f= "Not ("+*f+" And "+*g+")"; delete g;>>)
	| #(OR log_expr>[f] log_expr>[g] <<*f+=" Or "+*g; delete g;>>)
	| #(NOR log_expr>[f] log_expr>[g] <<*f=" Not ("+*f+" Or "+*g+")"; delete g;>>)
	| #(XOR log_expr>[f] log_expr>[g] <<*f="(("+*f+" And "+*g+") Or (Not ("+*f+") And Not ("+*g+")))"; delete g;>>)
	| #(IMPLY log_expr>[f] log_expr>[g] <<*f="(Not ("+*f+") Or ("+*g+"))"; delete g;>>)
	| #(NOT log_expr>[f] <<*f=" Not "+*f;>>)
	)
	;

log_value>[string *f]:
	  set_expr>[f]
	| #(True <<f=new string("True ");>>)
	| #(False <<f=new string("False ");>>)
	;

set_expr>[string *f]: <<string *g;>>
	( rel_expr>[f]
	| #(IN log_expr>[f] log_expr>[g] <<*f="Contains("+*f+", "+*g+")"; delete g;>>)
	| #(SUBSET log_expr>[f] log_expr>[g] <<delete f; delete g; throw(NOT_IMPLEMENTED);>>)
	| #(SUPSET log_expr>[f] log_expr>[g] <<delete f; delete g; throw(NOT_IMPLEMENTED);>>)
	| #(SUBSETEQ log_expr>[f] log_expr>[g] <<delete f; delete g; throw(NOT_IMPLEMENTED);>>)
	| #(SUPSETEQ log_expr>[f] log_expr>[g] <<delete f; delete g; throw(NOT_IMPLEMENTED);>>)
	| #(UNION  log_expr>[f] log_expr>[g] <<*f="Union("+*f+", "+*g+")"; delete g;>>)
	| #(INTERSECT  log_expr>[f] log_expr>[g] <<*f="Intersection("+*f+", "+*g+")"; delete g;>>)
	| #(EXCEPT  log_expr>[f] log_expr>[g] <<*f="Difference("+*f+", "+*g+")"; delete g;>>)
	| #(CROSS  log_expr>[f] log_expr>[g] <<delete f; delete g; throw(NOT_IMPLEMENTED);>>)
	| #(SETDEF log_expr>[f] log_expr>[g] <<delete f; delete g; throw(NOT_IMPLEMENTED);>>)
	| #(FORALL log_expr>[f] log_expr>[g] <<delete f; delete g; throw(NOT_IMPLEMENTED);>>)
	| #(EXISTS log_expr>[f] log_expr>[g] <<delete f; delete g; throw(NOT_IMPLEMENTED);>>)
	)
	;

rel_expr>[string *f]: <<string *g=NULL;>>
	( #(LESS add_expr>[f] add_expr>[g] <<*f="("+*f+"<"+*g+")"; delete g;>>)
	| #(LE add_expr>[f] add_expr>[g] <<*f="("+*f+"<="+*g+")"; delete g;>>)
	| #(EL add_expr>[f] add_expr>[g] <<*f="("+*f+"<="+*g+")"; delete g;>>)
	| #(GREATER add_expr>[f] add_expr>[g] <<*f="("+*f+">"+*g+")"; delete g;>>)
	| #(GE add_expr>[f] add_expr>[g] <<*f="("+*f+">="+*g+")"; delete g;>>)
	| #(EG add_expr>[f] add_expr>[g] <<*f="("+*f+">="+*g+")"; delete g;>>)
	| #(EQUAL log_expr>[f] log_expr>[g] <<*f="("+*f+"="+*g+")"; delete g;>>)
	| #(NEQ log_expr>[f] log_expr>[g] <<*f="("+*f+"!="+*g+")"; delete g;>>)
	| add_expr>[f]
	)
	;

add_expr>[string *f]: <<string *g=NULL;>>
	( #(PLUS add_expr>[f] add_expr>[g] <<*f="("+*f+"+"+*g+")"; delete g;>>)
	| #(MINUS add_expr>[f] add_expr>[g] <<*f="("+*f+"-"+*g+")"; delete g;>>)
	| neg_mult_expr>[f]
	)
	;

neg_mult_expr>[string *f]:
	  #(NEG neg_mult_expr>[f] <<*f="-("+*f+")";>>)
	| mult_expr>[f] 
	;

mult_expr>[string *f]: <<string *g=NULL;>>
	( #(MULT mult_expr>[f] neg_mult_expr>[g] <<*f="(("+*f+")*("+*g+"))"; delete g;>>)
	| #(DIV mult_expr>[f] neg_mult_expr>[g] <<*f="(("+*f+")/("+*g+"))"; delete g;>>)
	| #(MULTNONE mult_expr>[f] neg_mult_expr>[g] <<*f="(("+*f+")*("+*g+"))"; delete g;>>)
	| pow_expr>[f]
	| #(DIVI add_expr>[f] add_expr>[g] <<*f="Div("+*f+","+*g+")"; delete g;>>)
	| #(MOD add_expr>[f] add_expr>[g] <<*f="Mod("+*f+","+*g+")"; delete g;>>)
	)
	;

pow_expr>[string *f]: <<string *g=NULL;>>
	( #(CIRCUM fact>[f] neg_mult_expr>[g] <<*f="(("+*f+")^("+*g+"))"; delete g;>>)
	| fact>[f]
	)
	;
func>[string *f]:
	  #(SIN <<f=new string("Sin(");>>)
	| #(COS <<f=new string("Cos(");>>)
	| #(SEC <<f=new string("Sec(");>>)
	| #(COSEC <<f=new string("Csc(");>>)
	| #(TAN <<f=new string("Tan(");>>)
	| #(COT <<f=new string("Cot(");>>)
	| #(SINH <<f=new string("Sinh(");>>)
	| #(COSH <<f=new string("Cosh(");>>)
	| #(SECH <<f=new string("Sech(");>>)
	| #(COSECH <<f=new string("Csch(");>>)
	| #(TANH <<f=new string("Tanh(");>>)
	| #(COTH <<f=new string("Coth(");>>)
	| #(ARCSIN <<f=new string("ArcSin(");>>)
	| #(ARCCOS <<f=new string("ArcCos(");>>)
	| #(ARCSEC <<f=new string("ArcCos(1/");>>) //No ArcSec, so we have to make it.
	| #(ARCCOSEC <<f=new string("ArcSin(1/");>>) //No ArcCosec|ArcCsc, so we have to make it.
	| #(ARCTAN <<f=new string("ArcTan(");>>)
	| #(ARCCOT <<f=new string("ArcTan(1/");>>) //No ArcCot, so we have to make it.
	| #(ARCSINH <<f=new string("ArcSinh(");>>)
	| #(ARCCOSH <<f=new string("ArcCosh(");>>)
	| #(ARCSECH <<f=new string("ArcCosh(1/");>>) //No ArcSech, so we have to make it.
	| #(ARCCOSECH <<f=new string("ArcSinh(1/");>>) //No ArcCosech|ArcCsch, so we have to make it.
	| #(ARCTANH <<f=new string("ArcTanh(");>>)
	| #(ARCCOTH <<f=new string("ArcTanh(1/");>>) //No ArcCoth, so we have to make it.
	| #(EXP <<f=new string("Exp(");>>)
	| #(LOG <<f=new string("Ln(");>>)
	| #(ARG <<f=new string("Arg(");>>)
	| #(RE <<f=new string("Re(");>>)
	| #(IM <<f=new string("Im(");>>)
	| #(CONJUGATE <<f=new string("Conjugate(");>>)
	| #(SQRT <<f=new string("Sqrt(");>>)
	| #(LN <<f=new string("Ln(");>>)
	| #(COMPLEMENTER <<throw(NOT_IMPLEMENTED);>>)
	| #(TRANSPONATE <<throw(NOT_IMPLEMENTED);>>)
	;

gletter>[string *f]:
	  #(a:ALPHA <<if ((a->getText())[0]=='A') f=new string("Alpha");
	              else f=new string("alpha");
	            >>)
	| #(b:BETA <<f=new string("beta");>>)
	| #(c:GAMMA <<if ((c->getText())[0]=='G') f=new string("Gamma");
	               else f=new string("gamma");
	             >>)
	| #(d:DELTA <<if ((d->getText())[0]=='D') f=new string("Delta");
	              else f=new string("delta");
	            >>)
	| #(e:EPSILON <<f=new string("epsilon");>>)
	| #(z:ZETA <<f=new string("zeta");>>)
	| #(et:ETA <<f=new string("eta");>>)
	| #(t:THETA <<if ((t->getText())[0]=='T') f=new string("Theta");
	              else f=new string("theta");
	            >>)
	| #(i:IOTA <<f=new string("iota");>>)
	| #(k:KAPPA <<f=new string("kappa");>>)
	| #(l:LAMBDA <<if ((l->getText())[0]=='L') f=new string("Lambda");
	               else f=new string("lambda");
	             >>)
	| #(m:MU <<f=new string("mu");>>)
	| #(n:NU <<f=new string("nu");>>)
	| #(x:XI <<if ((x->getText())[0]=='X') f=new string("Xi");
	           else f=new string("xi");
	         >>)
	| #(om:OMICRON <<f=new string("omicron");>>)
	| #(p:PI <<f=new string("Pi");>>)
	| #(r:RHO <<f=new string("rho");>>)
	| #(s:SIGMA <<if ((s->getText())[0]=='S') f=new string("Sigma");
	              else f=new string("sigma");
	            >>)
	| #(ta:TAU <<f=new string("tau");>>)
	| #(u:UPSILON <<if ((u->getText())[0]=='U') f=new string("Upsilon");
	                else f=new string("upsilon");
	              >>)
	| #(ph:PHI <<if ((ph->getText())[0]=='P') f=new string("Phi");
	             else f=new string("phi");
	          >>)
	| #(ch:CHI <<f=new string("chi");>>)
	| #(ps:PSI <<if ((ps->getText())[0]=='P') f=new string("Psi");
	             else f=new string("psi");
	           >>)
	| #(o:OMEGA <<if ((o->getText())[0]=='O') f=new string("Omega");
	              else f=new string("omega");
	            >>)
	;

fact>[string *f]: <<string *g=NULL,*h=NULL,*j=NULL;>>
	( #(n:NUM
	      <<char *s=n->getText();
	        int i=0, len=strlen(s);
		for (;i<len;i++) if (s[i]=='e' || s[i]=='E') break;
		s[i]=0;
                f=new string(s);
	        if (i<len) *f=*f+"*10^"+(s+i+1);
	      >>)
	| #(x:VARIABLE <<f=new string(x->getText());>>)
	| #(c:CONST <<char *constant=c->getText();
		switch (constant[0]) {
			case 'E': last_identifier_was_in_uppercase=true; f=new string("(Exp(1))"); break;
			case 'e': last_identifier_was_in_uppercase=false; f=new string("(Exp(1))"); break;
			case 'I': last_identifier_was_in_uppercase=true; f=new string("I"); break;
			case 'i': last_identifier_was_in_uppercase=false; f=new string("I"); break;
			default: f=new string(constant); break;
		}
	>>)
	| gletter>[f]
	| #(INFTY <<f=new string("Infinity ");>>)
	| #(UNDEFINED <<f=new string("Undefined "); throw(NOT_IMPLEMENTED);>>)
	| #(LBRACKET log_expr>[f] log_expr>[g] {COMMA log_expr>[h] <<*g+=", "+*h; delete h;>>} RBRACKET
	  <<
	    if (*f=="(Exp(1))")
	    {
	      delete f;
	      if (last_identifier_was_in_uppercase) f=new string("E_letter");
	      else f=new string("e");
	    } else if (*f=="I")
	    {
	      delete f;
	      if (last_identifier_was_in_uppercase) f=new string("I_letter");
	      else f=new string("i");
	    } else if (*f=="Pi")
	    {
	      delete f;
	      f=new string("pi");
	    }
	    *f+="["+*g+"]"; delete g;
	  >>)
	| #(UNDERSCORE log_expr>[f] log_expr>[g] {COMMA log_expr>[h] <<*g+=", "+*h; delete h;>>}
	  <<
	    if (*f=="(Exp(1))")
	    {
	      delete f;
	      if (last_identifier_was_in_uppercase) f=new string("E_letter");
	      else f=new string("e");
	    } else if (*f=="I")
	    {
	      delete f;
	      if (last_identifier_was_in_uppercase) f=new string("I_letter");
	      else f=new string("i");
	    } else if (*f=="Pi")
	    {
	      delete f;
	      f=new string("pi");
	    }
	    *f+="["+*g+"]"; delete g;
	  >>)
	| #(LPAREN log_expr>[f] RPAREN <<*f="("+*f+")";>>)
	| #(LBRACE log_expr>[f] <<*f="{"+*f+"}";>>)
	| #(UFUNCTION log_expr>[f] log_expr>[g] (COMMA log_expr>[h]<<*g+=", "+*h; delete h;>>)* <<*f+="("+*g+")"; delete g;>>)
	| #(FUNCTION func>[f] {UNDERSCORELOG add_expr>[j]} add_expr>[g] <<*f="("+*f+"("+*g; delete g;>>
	    { add_expr>[h] <<*f+="))^("+*h; delete h;>>
	    }
	   )<<*f+="))";if (j!=NULL) {*f="("+*f+"/Ln("+*j+"))"; delete j;}>>
	| #(ABS add_expr>[f] <<*f="Abs("+*f+")";>>)
	| #(FLOOR add_expr>[f] <<*f="Floor("+*f+") ";>>)
	| #(CEIL add_expr>[f] <<*f=" Ceil("+*f+") ";>>)
	| #(ROOT add_expr>[f] LPAREN add_expr>[g] RPAREN <<*f="Exp(Ln("+*g+")/("+*f+"))"; delete g;>>)
	| #(DFACTORIAL add_expr>[f] <<*f+="!!";>>)
	| #(FACTORIAL add_expr>[f] <<*f+="!";>>)
	| #(ENUMERATE <<f=new string("");>> (set_expr>[g] <<*f+=*g+", ";>>)+ <<*f=f->substr(0, f->length()-2);>>)
	| #(RBRACKET <<f=NULL;>> {add_expr>[f] <<*f="{"+*f+"}";>>} <<if (f==NULL) f=new string("{}");>>)
	| #(DOTS <<throw(NOT_IMPLEMENTED);>>)
	| #(EMPTYSET <<f=new string("{}");>>)
	)
	;
}

